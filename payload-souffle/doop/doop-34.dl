.decl DirectSuperclass(class:number, superclass:number)
.input DirectSuperclass(IO="file", filename="DirectSuperclass.csv", delimiter=",")
.decl DirectSuperinterface(ref:number, interface:number)
.input DirectSuperinterface(IO="file", filename="DirectSuperinterface.csv", delimiter=",")
.decl MainClass(class:number)
.input MainClass(IO="file", filename="MainClass.csv", delimiter=",")
.decl FormalParam(index:number, method:number, var:number)
.input FormalParam(IO="file", filename="FormalParam.csv", delimiter=",")
.decl ComponentType(arrayType:number, componentType:number)
.input ComponentType(IO="file", filename="ComponentType.csv", delimiter=",")
.decl AssignReturnValue(invocation:number, to:number)
.input AssignReturnValue(IO="file", filename="AssignReturnValue.csv", delimiter=",")
.decl ActualParam(index:number, invocation:number, var:number)
.input ActualParam(IO="file", filename="ActualParam.csv", delimiter=",")
.decl Method_Modifier(mod:number, method:number)
.input Method_Modifier(IO="file", filename="Method_Modifier.csv", delimiter=",")
.decl Var_Type(var:number, type:number)
.input Var_Type(IO="file", filename="Var_Type.csv", delimiter=",")
.decl HeapAllocation_Type(heap:number, type:number)
.input HeapAllocation_Type(IO="file", filename="HeapAllocation_Type.csv", delimiter=",") // modified to be an EDB now

.decl isType(t:number)
.decl isReferenceType(t:number)
.decl isArrayType(t:number)
.decl isClassType(t:number)
.decl isInterfaceType(t:number)
.decl ApplicationClass(ref:number)
.decl Field_DeclaringType(field:number, declaringClass:number)
.decl Method_DeclaringType(method:number, declaringType:number)
.decl Method_ReturnType(method:number, returnType:number)
.decl Method_SimpleName(method:number, simpleName:number)
.decl Method_Params(method:number, params:number)
.decl ThisVar(method:number, var:number)
.decl Var_DeclaringMethod(var:number, method:number)
.decl Instruction_Method(insn:number, inMethod:number)
.decl isVirtualMethodInvocation_Insn(insn:number)
.decl isStaticMethodInvocation_Insn(insn:number)
.decl FieldInstruction_Signature(insn:number, sign:number)
.decl LoadInstanceField_Base(insn:number, var:number)
.decl LoadInstanceField_To(insn:number, var:number)
.decl StoreInstanceField_From(insn:number, var:number)
.decl StoreInstanceField_Base(insn:number, var:number)
.decl LoadStaticField_To(insn:number, var:number)
.decl StoreStaticField_From(insn:number, var:number)
.decl LoadArrayIndex_Base(insn:number, var:number)
.decl LoadArrayIndex_To(insn:number, var:number)
.decl StoreArrayIndex_From(insn:number, var:number)
.decl StoreArrayIndex_Base(insn:number, var:number)
.decl AssignInstruction_To(insn:number, to:number)
.decl AssignCast_From(insn:number, from:number)
.decl AssignCast_Type(insn:number, type:number)
.decl AssignLocal_From(insn:number, from:number)
.decl AssignHeapAllocation_Heap(insn:number, heap:number)
.decl ReturnNonvoid_Var(return:number, var:number)
.decl MethodInvocation_Method(invocation:number, signature:number)
.decl VirtualMethodInvocation_Base(invocation:number, base:number)
.decl VirtualMethodInvocation_SimpleName(invocation:number, simplename:number)
.decl VirtualMethodInvocation_Descriptor(invocation:number, descriptor:number)
.decl SpecialMethodInvocation_Base(invocation:number, base:number)
.decl MethodInvocation_Base(invocation:number, base:number)

.decl LoadInstanceField(base:number, sig:number, to:number, inmethod:number)
.decl StoreInstanceField(from:number, base:number, signature:number, inmethod:number)
.decl LoadStaticField(sig:number, to:number, inmethod:number)
.decl StoreStaticField(from:number, signature:number, inmethod:number)
.decl LoadArrayIndex(base:number, to:number, inmethod:number)
.decl StoreArrayIndex(from:number, base:number, inmethod:number)
.decl AssignCast(type:number, from:number, to:number, inmethod:number)
.decl AssignLocal(from:number, to:number, inmethod:number)
.decl AssignHeapAllocation(heap:number, to:number, inmethod:number)
.decl ReturnVar(var:number, method:number)
.decl StaticMethodInvocation(invocation:number, signature:number, inmethod:number)

.decl _ClassType(class:number)
.input _ClassType(IO="file", filename="ClassType.csv", delimiter=",")
.decl _ArrayType(arrayType:number)
.input _ArrayType(IO="file", filename="ArrayType.csv", delimiter=",")
.decl _InterfaceType(interface:number)
.input _InterfaceType(IO="file", filename="InterfaceType.csv", delimiter=",")
.decl _Var_DeclaringMethod(var:number, method:number)
.input _Var_DeclaringMethod(IO="file", filename="Var_DeclaringMethod.csv", delimiter=",")
.decl _ApplicationClass(type:number)
.input _ApplicationClass(IO="file", filename="ApplicationClass.csv", delimiter=",")
.decl _ThisVar(method:number, var:number)
.input _ThisVar(IO="file", filename="ThisVar.csv", delimiter=",")
.decl _NormalHeap(id:number, type:number)
.input _NormalHeap(IO="file", filename="NormalHeap.csv", delimiter=",")
.decl _StringConstant(id:number)
.input _StringConstant(IO="file", filename="StringConstant.csv", delimiter=",")
.decl _AssignHeapAllocation(instruction:number, index:number, heap:number, to:number, inmethod:number, linenumber:number)
.input _AssignHeapAllocation(IO="file", filename="AssignHeapAllocation.csv", delimiter=",")
.decl _AssignLocal(instruction:number, index:number, from:number, to:number, inmethod:number)
.input _AssignLocal(IO="file", filename="AssignLocal.csv", delimiter=",")
.decl _AssignCast(instruction:number, index:number, from:number, to:number, type:number, inmethod:number)
.input _AssignCast(IO="file", filename="AssignCast.csv", delimiter=",")
.decl _Field(signature:number, declaringClass:number, simplename:number, type:number)
.input _Field(IO="file", filename="Field.csv", delimiter=",")

isType(class) :- _ClassType(class).
isReferenceType(class) :- _ClassType(class).
isClassType(class) :- _ClassType(class).

isType(arrayType) :- _ArrayType(arrayType).
isReferenceType(arrayType) :- _ArrayType(arrayType).
isArrayType(arrayType) :- _ArrayType(arrayType).

isType(interface) :- _InterfaceType(interface).
isReferenceType(interface) :- _InterfaceType(interface).
isInterfaceType(interface) :- _InterfaceType(interface).

Var_DeclaringMethod(var, method) :- _Var_DeclaringMethod(var, method).

isType(type) :- _ApplicationClass(type).
isReferenceType(type) :- _ApplicationClass(type).
ApplicationClass(type) :- _ApplicationClass(type).

ThisVar(method, var) :- _ThisVar(method, var).

isType(type) :- _NormalHeap(_, type).

Instruction_Method(instruction, method) :-
  _AssignHeapAllocation(instruction, index, heap, to, method, linenumber).
AssignInstruction_To(instruction, to) :-
  _AssignHeapAllocation(instruction, index, heap, to, method, linenumber).
AssignHeapAllocation_Heap(instruction, heap) :-
  _AssignHeapAllocation(instruction, index, heap, to, method, linenumber).

Instruction_Method(instruction, method) :-
  _AssignLocal(instruction, index, from, to, method).
AssignLocal_From(instruction, from) :-
  _AssignLocal(instruction, index, from, to, method).
AssignInstruction_To(instruction, to) :-
  _AssignLocal(instruction, index, from, to, method).

Instruction_Method(instruction, method) :-
  _AssignCast(instruction, index, from, to, type, method).
AssignCast_Type(instruction, type) :-
  _AssignCast(instruction, index, from, to, type, method).
AssignCast_From(instruction, from) :-
  _AssignCast(instruction, index, from, to, type, method).
AssignInstruction_To(instruction, to) :-
  _AssignCast(instruction, index, from, to, type, method).

Field_DeclaringType(signature, declaringType) :- _Field(signature, declaringType, _, _).

MethodInvocation_Base(invocation, base) :- VirtualMethodInvocation_Base(invocation, base).
MethodInvocation_Base(invocation, base) :- SpecialMethodInvocation_Base(invocation, base).

.decl _StaticMethodInvocation(instruction:number, index:number, signature:number, method:number)
.input _StaticMethodInvocation(IO="file", filename="StaticMethodInvocation.csv", delimiter=",")
.decl _SpecialMethodInvocation(instruction:number, index:number, signature:number, base:number, method:number)
.input _SpecialMethodInvocation(IO="file", filename="SpecialMethodInvocation.csv", delimiter=",")
.decl _VirtualMethodInvocation(instruction:number, index:number, signature:number, base:number, method:number)
.input _VirtualMethodInvocation(IO="file", filename="VirtualMethodInvocation.csv", delimiter=",")
.decl _Method(method:number, simplename:number, params:number, declaringType:number, returnType:number, jvmDescriptor:number, arity:number)
.input _Method(IO="file", filename="Method.csv", delimiter=",")
.decl Method_Descriptor(method:number, descriptor:number)
.input Method_Descriptor(IO="file", filename="Method_Descriptor.csv", delimiter=",")
.decl _StoreInstanceField(instruction:number, index:number, from:number, base:number, signature:number, method:number)
.input _StoreInstanceField(IO="file", filename="StoreInstanceField.csv", delimiter=",")
.decl _LoadInstanceField(instruction:number, index:number, to:number, base:number, signature:number, method:number)
.input _LoadInstanceField(IO="file", filename="LoadInstanceField.csv", delimiter=",")
.decl _StoreStaticField(instruction:number, index:number, from:number, signature:number, method:number)
.input _StoreStaticField(IO="file", filename="StoreStaticField.csv", delimiter=",")
.decl _LoadStaticField(instruction:number, index:number, to:number, signature:number, method:number)
.input _LoadStaticField(IO="file", filename="LoadStaticField.csv", delimiter=",")
.decl _StoreArrayIndex(instruction:number, index:number, from:number, base:number, method:number)
.input _StoreArrayIndex(IO="file", filename="StoreArrayIndex.csv", delimiter=",")
.decl _LoadArrayIndex(instruction:number, index:number, to:number, base:number, method:number)
.input _LoadArrayIndex(IO="file", filename="LoadArrayIndex.csv", delimiter=",")
.decl _Return(instruction:number, index:number, var:number, method:number)
.input _Return(IO="file", filename="Return.csv", delimiter=",")

Instruction_Method(instruction, method) :-
  _StaticMethodInvocation(instruction, index, signature, method).
isStaticMethodInvocation_Insn(instruction) :-
  _StaticMethodInvocation(instruction, index, signature, method).
MethodInvocation_Method(instruction, signature) :-
  _StaticMethodInvocation(instruction, index, signature, method).

Instruction_Method(instruction, method) :-
  _SpecialMethodInvocation(instruction, index, signature, base, method).
SpecialMethodInvocation_Base(instruction, base) :-
  _SpecialMethodInvocation(instruction, index, signature, base, method).
MethodInvocation_Method(instruction, signature) :-
  _SpecialMethodInvocation(instruction, index, signature, base, method).

Instruction_Method(instruction, method) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).
isVirtualMethodInvocation_Insn(instruction) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).
VirtualMethodInvocation_Base(instruction, base) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).
MethodInvocation_Method(instruction, signature) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).

Method_SimpleName(method, simplename) :-
  _Method(method, simplename, params, declaringType, returnType, jvmDescriptor, arity).
Method_DeclaringType(method, declaringType) :-
  _Method(method, simplename, params, declaringType, returnType, jvmDescriptor, arity).

Instruction_Method(instruction, method) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).
StoreInstanceField_Base(instruction, base) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).
StoreInstanceField_From(instruction, from) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).

Instruction_Method(instruction, method) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).
LoadInstanceField_Base(instruction, base) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).
LoadInstanceField_To(instruction, to) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).

Instruction_Method(instruction, method) :-
  _StoreStaticField(instruction, index, from, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _StoreStaticField(instruction, index, from, signature, method).
StoreStaticField_From(instruction, from) :-
  _StoreStaticField(instruction, index, from, signature, method).

Instruction_Method(instruction, method) :-
  _LoadStaticField(instruction, index, to, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _LoadStaticField(instruction, index, to, signature, method).
LoadStaticField_To(instruction, to) :-
  _LoadStaticField(instruction, index, to, signature, method).

Instruction_Method(instruction, method) :-
  _StoreArrayIndex(instruction, index, from, base, method).
StoreArrayIndex_Base(instruction, base) :-
  _StoreArrayIndex(instruction, index, from, base, method).
StoreArrayIndex_From(instruction, from) :-
  _StoreArrayIndex(instruction, index, from, base, method).

Instruction_Method(instruction, method) :-
  _LoadArrayIndex(instruction, index, to, base, method).
LoadArrayIndex_Base(instruction, base) :-
  _LoadArrayIndex(instruction, index, to, base, method).
LoadArrayIndex_To(instruction, to) :-
  _LoadArrayIndex(instruction, index, to, base, method).

Instruction_Method(instruction, method) :-
  _Return(instruction, index, var, method).
ReturnNonvoid_Var(instruction, var) :-
  _Return(instruction, index, var, method).

LoadInstanceField(base, sig, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  LoadInstanceField_Base(insn, base),
  FieldInstruction_Signature(insn, sig),
  LoadInstanceField_To(insn, to).
StoreInstanceField(from, base, sig, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreInstanceField_From(insn, from),
  StoreInstanceField_Base(insn, base),
  FieldInstruction_Signature(insn, sig).
LoadStaticField(sig, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  FieldInstruction_Signature(insn, sig),
  LoadStaticField_To(insn, to).
StoreStaticField(from, sig, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreStaticField_From(insn, from),
  FieldInstruction_Signature(insn, sig).
LoadArrayIndex(base, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  LoadArrayIndex_Base(insn, base),
  LoadArrayIndex_To(insn, to).
StoreArrayIndex(from, base, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreArrayIndex_From(insn, from),
  StoreArrayIndex_Base(insn, base).
AssignCast(type, from, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  AssignCast_From(insn, from),
  AssignInstruction_To(insn, to),
  AssignCast_Type(insn, type).
AssignLocal(from, to, inmethod) :-
  AssignInstruction_To(insn, to),
  Instruction_Method(insn, inmethod),
  AssignLocal_From(insn, from).
AssignHeapAllocation(heap, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  AssignHeapAllocation_Heap(insn, heap),
  AssignInstruction_To(insn, to).
ReturnVar(var, method) :-
  Instruction_Method(insn, method),
  ReturnNonvoid_Var(insn, var).
StaticMethodInvocation(invocation, signature, inmethod) :-
  isStaticMethodInvocation_Insn(invocation),
  Instruction_Method(invocation, inmethod),
  MethodInvocation_Method(invocation, signature).
VirtualMethodInvocation_SimpleName(invocation, simplename) :-
  isVirtualMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_SimpleName(signature, simplename),
  Method_Descriptor(signature, descriptor).
VirtualMethodInvocation_Descriptor(invocation, descriptor) :-
  isVirtualMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_SimpleName(signature, simplename),
  Method_Descriptor(signature, descriptor).

.decl MethodLookup(simplename:number, descriptor:number, type:number, method:number)
.decl MethodImplemented(simplename:number, descriptor:number, type:number, method:number)
.decl DirectSubclass(a:number, c:number)
.decl Subclass(c:number, a:number)
.decl Superclass(c:number, a:number)
.decl Superinterface(k:number, c:number)
.decl SubtypeOf(subtype:number, type:number)
.decl SupertypeOf(supertype:number, type:number)
.decl SubtypeOfDifferent(subtype:number, type:number)
.decl MainMethodDeclaration(method:number)

.printsize MethodLookup
.printsize MethodImplemented
.printsize DirectSubclass
.printsize Subclass
.printsize Superclass
.printsize Superinterface
.printsize SubtypeOf
.printsize SupertypeOf
.printsize SubtypeOfDifferent
.printsize MainMethodDeclaration

MethodLookup(simplename, descriptor, type, method) :-
  MethodImplemented(simplename, descriptor, type, method).
MethodLookup(simplename, descriptor, type, method) :-
  DirectSuperclass(type, supertype),
  MethodLookup(simplename, descriptor, supertype, method),
  ! MethodImplemented(simplename, descriptor, type, _).
MethodLookup(simplename, descriptor, type, method) :-
  DirectSuperinterface(type, supertype),
  MethodLookup(simplename, descriptor, supertype, method),
  ! MethodImplemented(simplename, descriptor, type, _).
MethodImplemented(simplename, descriptor, type, method) :-
  Method_SimpleName(method, simplename),
  Method_Descriptor(method, descriptor),
  Method_DeclaringType(method, type),
  ! Method_Modifier(2161502, method).
MainMethodDeclaration(method) :-
  MainClass(type),
  Method_DeclaringType(method, type),
  method != 590319,
  method != 1138805,
  method != 926489,
  Method_SimpleName(method, 2979023),
  Method_Descriptor(method, 3018506),
  Method_Modifier(976234, method),
  Method_Modifier(909718, method).

DirectSubclass(a, c) :-
  DirectSuperclass(a, c).
Subclass(c, a) :-
  DirectSubclass(a, c).
Subclass(c, a) :-
  Subclass(b, a),
  DirectSubclass(b, c).
Superclass(c, a) :-
  Subclass(a, c).
Superinterface(k, c) :-
  DirectSuperinterface(c, k).
Superinterface(k, c) :-
  DirectSuperinterface(c, j),
  Superinterface(k, j).
Superinterface(k, c) :-
  DirectSuperclass(c, super),
  Superinterface(k, super).

SubtypeOf(s, s) :-
  isClassType(s).
SubtypeOf(t, t) :-
  isType(t).
SubtypeOf(s, t) :-
  Subclass(t, s).
SubtypeOf(s, s) :-
  isInterfaceType(s).
SubtypeOf(s, t) :-
  isClassType(s),
  Superinterface(t, s).
SubtypeOf(s, t) :-
  isInterfaceType(s),
  isType(t),
  t = 427039.
SubtypeOf(s, t) :-
  isArrayType(s),
  isType(t),
  t = 427039.
SubtypeOf(s, t) :-
  isInterfaceType(s),
  Superinterface(t, s).
SubtypeOf(s, t) :-
  SubtypeOf(sc, tc),
  ComponentType(s, sc),
  ComponentType(t, tc),
  isReferenceType(sc),
  isReferenceType(tc).
SubtypeOf(s, t) :-
  isArrayType(s),
  isInterfaceType(t),
  isType(t),
  t = 1088934.
SubtypeOf(s, t) :-
  isArrayType(s),
  isInterfaceType(t),
  isType(t),
  t = 716731.

SupertypeOf(s, t) :-
  SubtypeOf(t, s).
SubtypeOfDifferent(s, t) :-
  SubtypeOf(s, t),
  s != t.

.decl ClassInitializer(type:number, method:number)
.decl InitializedClass(classOrInterface:number)

.printsize ClassInitializer
.printsize InitializedClass

ClassInitializer(type, method) :-
   MethodImplemented(894110, 3016219, type, method).
InitializedClass(superclass) :-
   InitializedClass(class),
   DirectSuperclass(class, superclass).
InitializedClass(superinterface) :-
   InitializedClass(classOrInterface),
   DirectSuperinterface(classOrInterface, superinterface).
InitializedClass(class) :-
   MainMethodDeclaration(method),
   Method_DeclaringType(method, class).
InitializedClass(class) :-
   Reachable(inmethod),
   AssignHeapAllocation(heap, _, inmethod),
   HeapAllocation_Type(heap, class).
InitializedClass(class) :-
   Reachable(inmethod),
   Instruction_Method(invocation, inmethod),
   isStaticMethodInvocation_Insn(invocation),
   MethodInvocation_Method(invocation, signature),
   Method_DeclaringType(signature, class).
InitializedClass(classOrInterface) :-
   Reachable(inmethod),
   StoreStaticField(_, signature, inmethod),
   Field_DeclaringType(signature, classOrInterface).
InitializedClass(classOrInterface) :-
   Reachable(inmethod),
   LoadStaticField(signature, _, inmethod),
   Field_DeclaringType(signature, classOrInterface).
Reachable(clinit) :-
   InitializedClass(class),
   ClassInitializer(class, clinit).

.decl Assign(to:number, from:number)
.decl VarPointsTo(heap:number, var:number)
.decl InstanceFieldPointsTo(heap:number , fld:number, baseheap:number)
.decl StaticFieldPointsTo(heap:number, fld:number)
.decl CallGraphEdge(invocation:number, meth:number)
.decl ArrayIndexPointsTo(baseheap:number, heap:number)
.decl Reachable(method:number)

.printsize Assign
.printsize VarPointsTo
.printsize InstanceFieldPointsTo
.printsize StaticFieldPointsTo
.printsize CallGraphEdge
.printsize ArrayIndexPointsTo
.printsize Reachable











// Line 486
// Expensive 6 (Line 487)
Assign(actual, formal) :- CallGraphEdge(invocation, method), FormalParam(index, method, formal), ActualParam(index, invocation, actual).

Assign(return, local) :-
  CallGraphEdge(invocation, method),
  ReturnVar(return, method),
  AssignReturnValue(invocation, local).
VarPointsTo(heap, var) :-
  AssignHeapAllocation(heap, var, inMethod),
  Reachable(inMethod).
VarPointsTo(heap, to) :-
  Assign(from, to),
  VarPointsTo(heap, from).
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  AssignLocal(from, to, inmethod),
  VarPointsTo(heap, from).



// Expensive 2
VarPointsTo(heap, to) :- Reachable(inmethod), AssignCast(type, from, to, inmethod), SupertypeOf(type, heaptype), HeapAllocation_Type(heap, heaptype), VarPointsTo(heap, from).

// Expensive 5
ArrayIndexPointsTo(baseheap, heap) :- HeapAllocation_Type(baseheap, baseheaptype), VarPointsTo(baseheap, base), StoreArrayIndex(from, base, inmethod), ComponentType(baseheaptype, componenttype), SupertypeOf(componenttype, heaptype), VarPointsTo(heap, from), Reachable(inmethod), HeapAllocation_Type(heap, heaptype).//mod

// Expensive 3
VarPointsTo(heap, to) :- Reachable(inmethod), LoadArrayIndex(base, to, inmethod), VarPointsTo(baseheap, base), ArrayIndexPointsTo(baseheap, heap), Var_Type(to, type), HeapAllocation_Type(baseheap, baseheaptype), ComponentType(baseheaptype, basecomponenttype), SupertypeOf(type, basecomponenttype).

// Expensive 1
VarPointsTo(heap, to) :- Reachable(inmethod), LoadInstanceField(base, signature, to, inmethod), VarPointsTo(baseheap, base), InstanceFieldPointsTo(heap, signature, baseheap).

VarPointsTo(heap, to) :-
  Reachable(inmethod),
  LoadStaticField(fld, to, inmethod),
  StaticFieldPointsTo(heap, fld).

// Expensive 4
VarPointsTo(heap, this) :- Reachable(inMethod), Instruction_Method(invocation, inMethod), VirtualMethodInvocation_Base(invocation, base), VarPointsTo(heap, base), HeapAllocation_Type(heap, heaptype), VirtualMethodInvocation_SimpleName(invocation, simplename), VirtualMethodInvocation_Descriptor(invocation, descriptor), MethodLookup(simplename, descriptor, heaptype, toMethod), ThisVar(toMethod, this).

InstanceFieldPointsTo(heap, fld, baseheap) :-
  Reachable(inmethod),
  StoreInstanceField(from, base, fld, inmethod),
  VarPointsTo(heap, from),
  VarPointsTo(baseheap, base).
StaticFieldPointsTo(heap, fld) :-
  Reachable(inmethod),
  StoreStaticField(from, fld, inmethod),
  VarPointsTo(heap, from).

Reachable(toMethod) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  MethodLookup(simplename, descriptor, heaptype, toMethod).

// Expensive 7 (Line 547)
CallGraphEdge(invocation, toMethod) :- Reachable(inMethod), Instruction_Method(invocation, inMethod), VirtualMethodInvocation_Base(invocation, base), VarPointsTo(heap, base), HeapAllocation_Type(heap, heaptype), VirtualMethodInvocation_SimpleName(invocation, simplename), VirtualMethodInvocation_Descriptor(invocation, descriptor), MethodLookup(simplename, descriptor, heaptype, toMethod).

Reachable(tomethod) :-
  Reachable(inmethod),
  StaticMethodInvocation(invocation, tomethod, inmethod).
CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  StaticMethodInvocation(invocation, tomethod, inmethod).

Reachable(tomethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  ThisVar(tomethod, this).
CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  ThisVar(tomethod, this).
VarPointsTo(heap, this) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  ThisVar(tomethod, this).

Reachable(method) :-
  MainMethodDeclaration(method).

