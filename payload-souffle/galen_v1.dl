
.decl P(X: number, Z: number)
.input P(IO="file", filename="P.csv", delimiter=",")

.decl Q(X: number, Y: number, Z: number)
.input Q(IO="file", filename="Q.csv", delimiter=",")

.decl R(R: number, P: number, E: number)
.input R(IO="file", filename="R.csv", delimiter=",")

.decl C(Y: number, Z: number, W: number)
.input C(IO="file", filename="C.csv", delimiter=",")

.decl U(R: number, Z: number, W: number)
.input U(IO="file", filename="U.csv", delimiter=",")

.decl S(R: number, P: number)
.input S(IO="file", filename="S.csv", delimiter=",")

 
.decl OutP(X: number, Z: number)


.decl OutQ(X: number, Y: number, Z: number)


OutP(x,y) :- P(x,y).
OutQ(x,y,z) :- Q(x,y,z).
OutP(x,z) :- OutP(x,y), OutP(y,z).
// Reordered: moved OutQ(y,r,z) before OutP(x,y) to change join order
OutQ(x,r,z) :- OutQ(y,r,z), OutP(x,y).
// Reordered: moved OutQ(x,r,y) to first position, U(w,r,z) second, OutP(y,w) last
OutP(x,z) :- OutQ(x,r,y), U(w,r,z), OutP(y,w).
// Reordered: moved OutP(x,y) before OutP(x,w) to change join order 
OutP(x,z) :- C(y,w,z), OutP(x,y), OutP(x,w).
// Reordered: moved S(r,q) before OutQ(x,r,z) to change join order
OutQ(x,q,z) :- S(r,q), OutQ(x,r,z).
// Reordered: moved OutQ(z,u,o) to first position, R(y,u,e) second, OutQ(x,y,z) last
OutQ(x,e,o) :- OutQ(z,u,o), R(y,u,e), OutQ(x,y,z).

.printsize OutP
.printsize OutQ
