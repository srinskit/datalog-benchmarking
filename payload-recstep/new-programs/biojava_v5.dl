.in
.decl DirectSuperclass(class:number, superclass:number)
.input DirectSuperclass.csv

.decl DirectSuperinterface(ref:number, interface:number)
.input DirectSuperinterface.csv

.decl MainClass(class:number)
.input MainClass.csv

.decl FormalParam(index:number, method:number, var:number)
.input FormalParam.csv

.decl ComponentType(arrayType:number, componentType:number)
.input ComponentType.csv

.decl AssignReturnValue(invocation:number, to:number)
.input AssignReturnValue.csv

.decl ActualParam(index:number, invocation:number, var:number)
.input ActualParam.csv

.decl Method_Modifier(mod:number, method:number)
.input Method_Modifier.csv
.decl Var_Type(var:number, type:number)
.input Var_Type.csv
.decl HeapAllocation_Type(heap:number, type:number)
.input HeapAllocation_Type.csv # modified to be an EDB now


# Main schema
# .decl Method_Descriptor(method:number, descriptor:number)
.printsize
.decl isType(t:number)
.decl isReferenceType(t:number)
.decl isArrayType(t:number)
.decl isClassType(t:number)
.decl isInterfaceType(t:number)
.decl ApplicationClass(ref:number)
.decl Field_DeclaringType(field:number, declaringClass:number)
.decl Method_DeclaringType(method:number, declaringType:number)
.decl Method_ReturnType(method:number, returnType:number)
.decl Method_SimpleName(method:number, simpleName:number)
.decl Method_Params(method:number, params:number)
.decl ThisVar(method:number, var:number)
.decl Var_DeclaringMethod(var:number, method:number)
# .decl HeapAllocation_Type(heap:number, type:number) move into input
# .decl MainMethodArgArray(heap:number) redundant
# .decl MainMethodArgArrayContent(heap:number) redundant
.decl Instruction_Method(insn:number, inMethod:number)
.decl isVirtualMethodInvocation_Insn(insn:number)
.decl isStaticMethodInvocation_Insn(insn:number)
.decl FieldInstruction_Signature(insn:number, sign:number)
.decl LoadInstanceField_Base(insn:number, var:number)
.decl LoadInstanceField_To(insn:number, var:number)
.decl StoreInstanceField_From(insn:number, var:number)
.decl StoreInstanceField_Base(insn:number, var:number)
.decl LoadStaticField_To(insn:number, var:number)
.decl StoreStaticField_From(insn:number, var:number)
.decl LoadArrayIndex_Base(insn:number, var:number)
.decl LoadArrayIndex_To(insn:number, var:number)
.decl StoreArrayIndex_From(insn:number, var:number)
.decl StoreArrayIndex_Base(insn:number, var:number)
.decl AssignInstruction_To(insn:number, to:number)
.decl AssignCast_From(insn:number, from:number)
.decl AssignCast_Type(insn:number, type:number)
.decl AssignLocal_From(insn:number, from:number)
.decl AssignHeapAllocation_Heap(insn:number, heap:number)
.decl ReturnNonvoid_Var(return:number, var:number)
.decl MethodInvocation_Method(invocation:number, signature:number)
.decl VirtualMethodInvocation_Base(invocation:number, base:number)
.decl VirtualMethodInvocation_SimpleName(invocation:number, simplename:number)
.decl VirtualMethodInvocation_Descriptor(invocation:number, descriptor:number)
.decl SpecialMethodInvocation_Base(invocation:number, base:number)
.decl MethodInvocation_Base(invocation:number, base:number)

# Fat schema
.decl LoadInstanceField(base:number, sig:number, to:number, inmethod:number)
.decl StoreInstanceField(from:number, base:number, signature:number, inmethod:number)
.decl LoadStaticField(sig:number, to:number, inmethod:number)
.decl StoreStaticField(from:number, signature:number, inmethod:number)
.decl LoadArrayIndex(base:number, to:number, inmethod:number)
.decl StoreArrayIndex(from:number, base:number, inmethod:number)
.decl AssignCast(type:number, from:number, to:number, inmethod:number)
.decl AssignLocal(from:number, to:number, inmethod:number)
.decl AssignHeapAllocation(heap:number, to:number, inmethod:number)
.decl ReturnVar(var:number, method:number)
.decl StaticMethodInvocation(invocation:number, signature:number, inmethod:number)


# imports
.in
.decl _ClassType(class:number)
.input ClassType.csv
.decl _ArrayType(arrayType:number)
.input ArrayType.csv
.decl _InterfaceType(interface:number)
.input InterfaceType.csv
.decl _Var_DeclaringMethod(var:number, method:number)
.input Var_DeclaringMethod.csv 
.decl _ApplicationClass(type:number)
.input ApplicationClass.csv
.decl _ThisVar(method:number, var:number)
.input ThisVar.csv
.decl _NormalHeap(id:number, type:number)
.input NormalHeap.csv
.decl _StringConstant(id:number)
.input StringConstant.csv
.decl _AssignHeapAllocation(instruction:number, index:number, heap:number, to:number, inmethod:number, linenumber:number)
.input AssignHeapAllocation.csv
.decl _AssignLocal(instruction:number, index:number, from:number, to:number, inmethod:number)
.input AssignLocal.csv
.decl _AssignCast(instruction:number, index:number, from:number, to:number, type:number, inmethod:number)
.input AssignCast.csv
.decl _Field(signature:number, declaringClass:number, simplename:number, type:number)
.input Field.csv

.rule
isType(class) :- _ClassType(class).
isReferenceType(class) :- _ClassType(class).
isClassType(class) :- _ClassType(class).

isType(arrayType) :- _ArrayType(arrayType).
isReferenceType(arrayType) :- _ArrayType(arrayType).
isArrayType(arrayType) :- _ArrayType(arrayType).

isType(interface) :- _InterfaceType(interface).
isReferenceType(interface) :- _InterfaceType(interface).
isInterfaceType(interface) :- _InterfaceType(interface).

Var_DeclaringMethod(var, method) :- _Var_DeclaringMethod(var, method). # redundant Var_DeclaringMethod

isType(type) :- _ApplicationClass(type).
isReferenceType(type) :- _ApplicationClass(type).
ApplicationClass(type) :- _ApplicationClass(type).

ThisVar(method, var) :- _ThisVar(method, var).

isType(type) :- _NormalHeap(_, type).
# HeapAllocation_Type(id, type) :- _NormalHeap(id, type).
# HeapAllocation_Type(id, 1127085) :- _StringConstant(id).

Instruction_Method(instruction, method) :-
  _AssignHeapAllocation(instruction, index, heap, to, method, linenumber).
AssignInstruction_To(instruction, to) :-
  _AssignHeapAllocation(instruction, index, heap, to, method, linenumber).
AssignHeapAllocation_Heap(instruction, heap) :-
  _AssignHeapAllocation(instruction, index, heap, to, method, linenumber).

Instruction_Method(instruction, method) :-
  _AssignLocal(instruction, index, from, to, method).
AssignLocal_From(instruction, from) :-
  _AssignLocal(instruction, index, from, to, method).
AssignInstruction_To(instruction, to) :- 
  _AssignLocal(instruction, index, from, to, method).

Instruction_Method(instruction, method) :-
  _AssignCast(instruction, index, from, to, type, method).
AssignCast_Type(instruction, type) :-
  _AssignCast(instruction, index, from, to, type, method).
AssignCast_From(instruction, from) :-
  _AssignCast(instruction, index, from, to, type, method).
AssignInstruction_To(instruction, to) :- 
  _AssignCast(instruction, index, from, to, type, method).

Field_DeclaringType(signature, declaringType) :- _Field(signature, declaringType, _, _).

MethodInvocation_Base(invocation, base) :- VirtualMethodInvocation_Base(invocation, base).
MethodInvocation_Base(invocation, base) :- SpecialMethodInvocation_Base(invocation, base).




.in
.decl _StaticMethodInvocation(instruction:number, index:number, signature:number, method:number)
.input StaticMethodInvocation.csv
.decl _SpecialMethodInvocation(instruction:number, index:number, signature:number, base:number, method:number)
.input SpecialMethodInvocation.csv
.decl _VirtualMethodInvocation(instruction:number, index:number, signature:number, base:number, method:number)
.input VirtualMethodInvocation.csv
.decl _Method(method:number, simplename:number, params:number, declaringType:number, returnType:number, jvmDescriptor:number, arity:number)
.input Method.csv
.decl Method_Descriptor(method:number, descriptor:number)
.input Method_Descriptor.csv
.decl _StoreInstanceField(instruction:number, index:number, from:number, base:number, signature:number, method:number)
.input StoreInstanceField.csv
.decl _LoadInstanceField(instruction:number, index:number, to:number, base:number, signature:number, method:number)
.input LoadInstanceField.csv
.decl _StoreStaticField(instruction:number, index:number, from:number, signature:number, method:number)
.input StoreStaticField.csv
.decl _LoadStaticField(instruction:number, index:number, to:number, signature:number, method:number)
.input LoadStaticField.csv
.decl _StoreArrayIndex(instruction:number, index:number, from:number, base:number, method:number)
.input StoreArrayIndex.csv
.decl _LoadArrayIndex(instruction:number, index:number, to:number, base:number, method:number)
.input LoadArrayIndex.csv
.decl _Return(instruction:number, index:number, var:number, method:number)
.input Return.csv

.rule
Instruction_Method(instruction, method) :-
  _StaticMethodInvocation(instruction, index, signature, method).
isStaticMethodInvocation_Insn(instruction) :-
  _StaticMethodInvocation(instruction, index, signature, method).
MethodInvocation_Method(instruction, signature) :- 
  _StaticMethodInvocation(instruction, index, signature, method).

Instruction_Method(instruction, method) :-
  _SpecialMethodInvocation(instruction, index, signature, base, method).
SpecialMethodInvocation_Base(instruction, base) :-
  _SpecialMethodInvocation(instruction, index, signature, base, method).
MethodInvocation_Method(instruction, signature) :-
  _SpecialMethodInvocation(instruction, index, signature, base, method).

Instruction_Method(instruction, method) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).
isVirtualMethodInvocation_Insn(instruction) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).
VirtualMethodInvocation_Base(instruction, base) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).
MethodInvocation_Method(instruction, signature) :-
  _VirtualMethodInvocation(instruction, index, signature, base, method).

Method_SimpleName(method, simplename) :-
  _Method(method, simplename, params, declaringType, returnType, jvmDescriptor, arity).
Method_DeclaringType(method, declaringType) :-
  _Method(method, simplename, params, declaringType, returnType, jvmDescriptor, arity).

# direct import of Method_Descriptor
# Method_Descriptor(method, descriptor) :- 
#   Method_ReturnType(method, returnType),
#   Method_Params(method, params),
#   descriptor = cat(returnType, params).

Instruction_Method(instruction, method) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).
StoreInstanceField_Base(instruction, base) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).
StoreInstanceField_From(instruction, from) :-
  _StoreInstanceField(instruction, index, from, base, signature, method).

Instruction_Method(instruction, method) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).
LoadInstanceField_Base(instruction, base) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).
LoadInstanceField_To(instruction, to) :-
  _LoadInstanceField(instruction, index, to, base, signature, method).

Instruction_Method(instruction, method) :-
  _StoreStaticField(instruction, index, from, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _StoreStaticField(instruction, index, from, signature, method).
StoreStaticField_From(instruction, from) :-
  _StoreStaticField(instruction, index, from, signature, method).

Instruction_Method(instruction, method) :-
  _LoadStaticField(instruction, index, to, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  _LoadStaticField(instruction, index, to, signature, method).
LoadStaticField_To(instruction, to) :-
  _LoadStaticField(instruction, index, to, signature, method).

Instruction_Method(instruction, method) :-
  _StoreArrayIndex(instruction, index, from, base, method).
StoreArrayIndex_Base(instruction, base) :-
  _StoreArrayIndex(instruction, index, from, base, method).
StoreArrayIndex_From(instruction, from) :-
  _StoreArrayIndex(instruction, index, from, base, method).

Instruction_Method(instruction, method) :-
  _LoadArrayIndex(instruction, index, to, base, method).
LoadArrayIndex_Base(instruction, base) :-
  _LoadArrayIndex(instruction, index, to, base, method).
LoadArrayIndex_To(instruction, to) :-
  _LoadArrayIndex(instruction, index, to, base, method).

Instruction_Method(instruction, method) :-
  _Return(instruction, index, var, method).
ReturnNonvoid_Var(instruction, var) :-
  _Return(instruction, index, var, method).


# fat schema population
LoadInstanceField(base, sig, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  LoadInstanceField_Base(insn, base),
  FieldInstruction_Signature(insn, sig),
  LoadInstanceField_To(insn, to).
StoreInstanceField(from, base, sig, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreInstanceField_From(insn, from),
  StoreInstanceField_Base(insn, base),
  FieldInstruction_Signature(insn, sig).
LoadStaticField(sig, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  FieldInstruction_Signature(insn, sig),
  LoadStaticField_To(insn, to).
StoreStaticField(from, sig, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreStaticField_From(insn, from),
  FieldInstruction_Signature(insn, sig).
LoadArrayIndex(base, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  LoadArrayIndex_Base(insn, base),
  LoadArrayIndex_To(insn, to).
StoreArrayIndex(from, base, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreArrayIndex_From(insn, from),
  StoreArrayIndex_Base(insn, base).
AssignCast(type, from, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  AssignCast_From(insn, from),
  AssignInstruction_To(insn, to),
  AssignCast_Type(insn, type).
AssignLocal(from, to, inmethod) :-
  AssignInstruction_To(insn, to),
  Instruction_Method(insn, inmethod),
  AssignLocal_From(insn, from).
AssignHeapAllocation(heap, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  AssignHeapAllocation_Heap(insn, heap),
  AssignInstruction_To(insn, to).
ReturnVar(var, method) :-
  Instruction_Method(insn, method),
  ReturnNonvoid_Var(insn, var).
StaticMethodInvocation(invocation, signature, inmethod) :-
  isStaticMethodInvocation_Insn(invocation),
  Instruction_Method(invocation, inmethod),
  MethodInvocation_Method(invocation, signature).
# HeapAllocation_Type(heap, type),
# MainMethodArgArray(heap) :-
#   heap = 4271541,
#   type = 922666.
# HeapAllocation_Type(heap, type),
# MainMethodArgArrayContent(heap) :-
#   heap = 4269990,
#   type = 1127085.
VirtualMethodInvocation_SimpleName(invocation, simplename) :-
  isVirtualMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_SimpleName(signature, simplename),
  Method_Descriptor(signature, descriptor).
VirtualMethodInvocation_Descriptor(invocation, descriptor) :-
  isVirtualMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_SimpleName(signature, simplename),
  Method_Descriptor(signature, descriptor).

  
# Basic (type-based) analysis
# .comp Basic {
.printsize
.decl MethodLookup(simplename:number, descriptor:number, type:number, method:number)
.decl MethodImplemented(simplename:number, descriptor:number, type:number, method:number)
.decl DirectSubclass(a:number, c:number)
.decl Subclass(c:number, a:number)
.decl Superclass(c:number, a:number)
.decl Superinterface(k:number, c:number)
.decl SubtypeOf(subtype:number, type:number)
.decl SupertypeOf(supertype:number, type:number)
.decl SubtypeOfDifferent(subtype:number, type:number)
.decl MainMethodDeclaration(method:number)












.rule
MethodLookup(simplename, descriptor, type, method) :-
  MethodImplemented(simplename, descriptor, type, method).
MethodLookup(simplename, descriptor, type, method) :-
  DirectSuperclass(type, supertype),
  MethodLookup(simplename, descriptor, supertype, method),
  ! MethodImplemented(simplename, descriptor, type, _).
MethodLookup(simplename, descriptor, type, method) :-
  DirectSuperinterface(type, supertype),
  MethodLookup(simplename, descriptor, supertype, method),
  ! MethodImplemented(simplename, descriptor, type, _).
MethodImplemented(simplename, descriptor, type, method) :-
  Method_SimpleName(method, simplename),
  Method_Descriptor(method, descriptor),
  Method_DeclaringType(method, type),
  ! Method_Modifier(779558, method).
MainMethodDeclaration(method) :-
  MainClass(type),
  Method_DeclaringType(method, type),
  method != 1045470,
  method != 2357714,
  method != 1614718,
  Method_SimpleName(method, 780495),
  Method_Descriptor(method, 5097637),
  Method_Modifier(1347650, method),
  Method_Modifier(1347648, method).

DirectSubclass(a, c) :-
  DirectSuperclass(a, c).
Subclass(c, a) :-
  DirectSubclass(a, c).
Subclass(c, a) :-
  Subclass(b, a),
  DirectSubclass(b, c).
Superclass(c, a) :-
  Subclass(a, c).
Superinterface(k, c) :-
  DirectSuperinterface(c, k).
Superinterface(k, c) :-
  DirectSuperinterface(c, j),
  Superinterface(k, j).
Superinterface(k, c) :-
  DirectSuperclass(c, super),
  Superinterface(k, super).

SubtypeOf(s, s) :-
  isClassType(s).
SubtypeOf(t, t) :-
  isType(t).
SubtypeOf(s, t) :-
  Subclass(t, s).
SubtypeOf(s, s) :-
  isInterfaceType(s).
SubtypeOf(s, t) :-
  isClassType(s),
  Superinterface(t, s).
SubtypeOf(s, t) :-
  isInterfaceType(s),
  isType(t),
  t = 1168277.
SubtypeOf(s, t) :-
  isArrayType(s),
  isType(t),
  t = 1168277.
SubtypeOf(s, t) :-
  isInterfaceType(s),
  Superinterface(t, s).
# cross-product warning
# SubtypeOf(s, t) :-
#   ComponentType(s, sc),
#   ComponentType(t, tc),
#   isReferenceType(sc),
#   isReferenceType(tc),
#   SubtypeOf(sc, tc).
SubtypeOf(s, t) :-
  SubtypeOf(sc, tc),
  ComponentType(s, sc),
  ComponentType(t, tc),
  isReferenceType(sc),
  isReferenceType(tc).
SubtypeOf(s, t) :-
  isArrayType(s),
  isInterfaceType(t),
  isType(t),
  t = 1875761.
SubtypeOf(s, t) :-
  isArrayType(s),
  isInterfaceType(t),
  isType(t),
  t = 1132248.

SupertypeOf(s, t) :-
  SubtypeOf(t, s).
SubtypeOfDifferent(s, t) :-
  SubtypeOf(s, t),
  s != t.
# }
# .init basic = Basic





# class initialization
.printsize
.decl ClassInitializer(type:number, method:number)
.decl InitializedClass(classOrInterface:number)




.rule
ClassInitializer(type, method) :-
   MethodImplemented(1386348, 5096596, type, method).
InitializedClass(superclass) :-
   InitializedClass(class),
   DirectSuperclass(class, superclass).
InitializedClass(superinterface) :-
   InitializedClass(classOrInterface),
   DirectSuperinterface(classOrInterface, superinterface).
InitializedClass(class) :-
   MainMethodDeclaration(method),
   Method_DeclaringType(method, class).
InitializedClass(class) :-
   Reachable(inmethod),
   AssignHeapAllocation(heap, _, inmethod),
   HeapAllocation_Type(heap, class).
InitializedClass(class) :-
   Reachable(inmethod),
   Instruction_Method(invocation, inmethod),
   isStaticMethodInvocation_Insn(invocation),
   MethodInvocation_Method(invocation, signature),
   Method_DeclaringType(signature, class).
InitializedClass(classOrInterface) :-
   Reachable(inmethod),
   StoreStaticField(_, signature, inmethod),
   Field_DeclaringType(signature, classOrInterface).
InitializedClass(classOrInterface) :-
   Reachable(inmethod),
   LoadStaticField(signature, _, inmethod),
   Field_DeclaringType(signature, classOrInterface).
Reachable(clinit) :-
   InitializedClass(class),
   ClassInitializer(class, clinit).


# Main (value-based) analysis
# basic.MethodImplemented, basic.MainMethodDeclaration, basic.SupertypeOf, basic.MethodLookup
.printsize
.decl Assign(to:number, from:number)
.decl VarPointsTo(heap:number, var:number)
.decl InstanceFieldPointsTo(heap:number , fld:number, baseheap:number)
.decl StaticFieldPointsTo(heap:number, fld:number)
.decl CallGraphEdge(invocation:number, meth:number)
.decl ArrayIndexPointsTo(baseheap:number, heap:number)
.decl Reachable(method:number)









.rule
Assign(actual, formal) :-
  CallGraphEdge(invocation, method),
  FormalParam(index, method, formal),
  ActualParam(index, invocation, actual).
Assign(return, local) :-
  CallGraphEdge(invocation, method),
  ReturnVar(return, method),
  AssignReturnValue(invocation, local).
VarPointsTo(heap, var) :-
  AssignHeapAllocation(heap, var, inMethod),
  Reachable(inMethod).
VarPointsTo(heap, to) :-
  Assign(from, to),
  VarPointsTo(heap, from).
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  AssignLocal(from, to, inmethod),
  VarPointsTo(heap, from).
# .plan 1:(3,2,1)
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  AssignCast(type, from, to, inmethod),
  SupertypeOf(type, heaptype),
  HeapAllocation_Type(heap, heaptype),
  VarPointsTo(heap, from).
#  .plan 1:(5,2,1,4,3)
ArrayIndexPointsTo(baseheap, heap) :-
  Reachable(inmethod),
  StoreArrayIndex(from, base, inmethod),
  VarPointsTo(baseheap, base),
  VarPointsTo(heap, from),
  HeapAllocation_Type(heap, heaptype),
  HeapAllocation_Type(baseheap, baseheaptype),
  ComponentType(baseheaptype, componenttype),
  SupertypeOf(componenttype, heaptype).
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  LoadArrayIndex(base, to, inmethod),
  Var_Type(to, type),
  VarPointsTo(baseheap, base),
  ArrayIndexPointsTo(baseheap, heap),
  SupertypeOf(type, basecomponenttype),
  HeapAllocation_Type(baseheap, baseheaptype),
  ComponentType(baseheaptype, basecomponenttype).         # Reordered: change Var_Type to third position, SupertypeOf to 6th position
# .plan 1:(3,2,1,4,5,6,7,8), 2:(4,3,2,1,5,6,7,8)
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  LoadInstanceField(base, signature, to, inmethod),
  VarPointsTo(baseheap, base),
  InstanceFieldPointsTo(heap, signature, baseheap).
# .plan 1:(3,2,1,4), 2:(4,2,1,3)
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  LoadStaticField(fld, to, inmethod),
  StaticFieldPointsTo(heap, fld).
VarPointsTo(heap, this) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  MethodLookup(simplename, descriptor, heaptype, toMethod),
  ThisVar(toMethod, this).
# .plan 1:(4,3,2,1,5,6,7,8,9)
InstanceFieldPointsTo(heap, fld, baseheap) :-
  Reachable(inmethod),
  StoreInstanceField(from, base, fld, inmethod),
  VarPointsTo(heap, from),
  VarPointsTo(baseheap, base).
# .plan 1:(3,2,1,4), 2:(4,2,1,3)
StaticFieldPointsTo(heap, fld) :-
  Reachable(inmethod),
  StoreStaticField(from, fld, inmethod),
  VarPointsTo(heap, from).

# Reachable(toMethod), CallGraphEdge(invocation, toMethod)
Reachable(toMethod) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  MethodLookup(simplename, descriptor, heaptype, toMethod),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor).           # Reordered: move MethodLookup to 6th position
CallGraphEdge(invocation, toMethod) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  MethodLookup(simplename, descriptor, heaptype, toMethod).
# .plan 1:(4,3,2,1,5,6,7,8)

# Reachable(tomethod), CallGraphEdge(invocation, tomethod)
Reachable(tomethod) :-
  Reachable(inmethod),
  StaticMethodInvocation(invocation, tomethod, inmethod).
CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  StaticMethodInvocation(invocation, tomethod, inmethod).

# Reachable(tomethod), CallGraphEdge(invocation, tomethod), VarPointsTo(heap, this)
Reachable(tomethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  ThisVar(tomethod, this).
CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  ThisVar(tomethod, this).
VarPointsTo(heap, this) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  ThisVar(tomethod, this).
# .plan 1:(4,3,2,1,5,6)

Reachable(method) :-
  MainMethodDeclaration(method).





# ./target/release/executing -p /users/hangdong/xalan/xalan.dl -f /users/hangdong/xalan -c ./examples/csvs -d $'\t' -w 8

