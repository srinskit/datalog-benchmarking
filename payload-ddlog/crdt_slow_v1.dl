typedef node = signed<32>

input relation Insert_input(a: node, b: node, c: node, d: node)
input relation Remove_input(a: node, b: node)

output relation insert(a: node, b: node, c: node, d: node)
output relation remove(IDCtr: node, IDN: node)
output relation hasChild(ParentCtr: node, ParentN: node)
output relation assign(IDCtr: node, IDN: node, ElemCtr: node, ElemN: node, Value: node)
output relation laterChild(ParentCtr: node, ParentN: node, ChildCtr: node, ChildN: node)
output relation firstChild(ParentCtr: node, ParentN: node, ChildCtr: node, ChildN: node)
output relation sibling(ChildCtr1: node, ChildN1: node, ChildCtr2: node, ChildN2: node)
output relation laterSibling(SibCtr1: node, SibN1: node, SibCtr2: node, SibN2: node)
output relation laterSibling2(SibCtr1: node, SibN1: node, SibCtr3: node, SibN3: node)
output relation nextSibling(SibCtr1: node, SibN1: node, SibCtr2: node, SibN2: node)
output relation hasNextSibling(SibCtr1: node, SibN1: node)
output relation nextSiblingAnc(StartCtr: node, StartN: node, NextCtr: node, NextN: node)
output relation nextElem(PrevCtr: node, PrevN: node, NextCtr: node, NextN: node)
output relation currentValue(ElemCtr: node, ElemN: node, Value: node)
output relation hasValue(ElemCtr: node, ElemN: node)
output relation skipBlank(FromCtr: node, FromN: node, ToCtr: node, ToN: node)
output relation nextVisible(PrevCtr: node, PrevN: node, NextCtr: node, NextN: node)
output relation result(ctr1: node, ctr2: node, value: node)
output relation RelationSizes(relation_name: string, size: bit<64>)

insert(a, b, c, d) :- Insert_input(a, b, c, d).
remove(a, b) :- Remove_input(a, b).
assign(ctr, n, ctr, n, n) :- insert(ctr, n, _, _).
hasChild(ParentCtr, ParentN) :- insert(_, _, ParentCtr, ParentN).

laterChild(ParentCtr, ParentN, Ctr2, N2) :-
  insert(Ctr1, N1, ParentCtr, ParentN),
  insert(Ctr2, N2, ParentCtr, ParentN),
  Ctr1 * 10 + N1 > Ctr2 * 10 + N2.

firstChild(ParentCtr, ParentN, ChildCtr, ChildN) :-
  insert(ChildCtr, ChildN, ParentCtr, ParentN), 
  not laterChild(ParentCtr, ParentN, ChildCtr, ChildN).

sibling(ChildCtr1, ChildN1, ChildCtr2, ChildN2) :-
  insert(ChildCtr1, ChildN1, ParentCtr, ParentN), 
  insert(ChildCtr2, ChildN2, ParentCtr, ParentN).

laterSibling(Ctr1, N1, Ctr2, N2) :-
  sibling(Ctr1, N1, Ctr2, N2),
  Ctr1 * 10 + N1 > Ctr2 * 10 + N2.

laterSibling2(Ctr1, N1, Ctr3, N3) :-
  sibling(Ctr1, N1, Ctr2, N2),
  sibling(Ctr1, N1, Ctr3, N3),
  Ctr1 * 10 + N1 > Ctr2 * 10 + N2, 
  Ctr2 * 10 + N2 > Ctr3 * 10 + N3.

nextSibling(Ctr1, N1, Ctr2, N2) :-
  laterSibling(Ctr1, N1, Ctr2, N2),
  not laterSibling2(Ctr1, N1, Ctr2, N2).

hasNextSibling(SibCtr1, SibN1) :- laterSibling(SibCtr1, SibN1, _, _).

nextSiblingAnc(StartCtr, StartN, NextCtr, NextN) :- nextSibling(StartCtr, StartN, NextCtr, NextN).
nextSiblingAnc(StartCtr, StartN, NextCtr, NextN) :- 
    not hasNextSibling(StartCtr, StartN), 
    insert(StartCtr, StartN, ParentCtr, ParentN), 
    nextSiblingAnc(ParentCtr, ParentN, NextCtr, NextN).

nextElem(PrevCtr, PrevN, NextCtr, NextN) :- firstChild(PrevCtr, PrevN, NextCtr, NextN).
nextElem(PrevCtr, PrevN, NextCtr, NextN) :- not hasChild(PrevCtr, PrevN), nextSiblingAnc(PrevCtr, PrevN, NextCtr, NextN).

currentValue(ElemCtr, ElemN, Value) :- assign(IDCtr, IDN, ElemCtr, ElemN, Value), not remove(IDCtr, IDN).

hasValue(ElemCtr, ElemN) :- currentValue(ElemCtr, ElemN, _).

skipBlank(FromCtr, FromN, ToCtr, ToN) :- nextElem(FromCtr, FromN, ToCtr, ToN).
skipBlank(FromCtr, FromN, ToCtr, ToN) :- skipBlank(ViaCtr, ViaN, ToCtr, ToN), nextElem(FromCtr, FromN, ViaCtr, ViaN), not hasValue(ViaCtr, ViaN).

nextVisible(PrevCtr, PrevN, NextCtr, NextN) :- 
  skipBlank(PrevCtr, PrevN, NextCtr, NextN), 
  hasValue(NextCtr, NextN),
  hasValue(PrevCtr, PrevN).

result(ctr1, ctr2, value) :- 
    nextVisible(ctr1, _, ctr2, N2), 
    currentValue(ctr2, N2, value).

RelationSizes("nextSiblingAnc", size) :- size = Aggregate((), count_distinct(nextSiblingAnc(StartCtr, StartN, NextCtr, NextN))).