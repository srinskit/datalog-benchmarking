typedef number = bit<32>

input relation Arc(x:number, y:number, l:number)

output relation Zero(x:number, y:number)
output relation MOne(x:number, y:number)
output relation Dyck(x:number, y:number)

Zero(x, y) :- Arc(x, y, 0).
MOne(x, y) :- Arc(x, y, 1).

Dyck(x, y) :- Zero(x, z), Zero(z, y).
Dyck(x, y) :- MOne(x, z), MOne(z, y).
Dyck(x, y) :- Zero(x, z), Dyck(z, w), Zero(w, y).
Dyck(x, y) :- MOne(x, z), Dyck(z, w), MOne(w, y).
Dyck(x, y) :- Dyck(x, z), Dyck(z, y).

output relation RelationSizes(rel: string, size: bit<64>)
RelationSizes("Zero", size) :- Zero(x, y),  var size = (x, y).group_by(()).count_distinct().
RelationSizes("MOne", size) :- MOne(x, y),  var size = (x, y).group_by(()).count_distinct().
RelationSizes("Dyck", size) :- Dyck(x, y),  var size = (x, y).group_by(()).count_distinct().