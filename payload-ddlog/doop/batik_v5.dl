typedef number = signed<32> 

// .in
input relation DirectSuperclass(class:number, superclass:number)
input relation DirectSuperinterface(mod_ref:number, interface:number)
input relation MainClass(class:number)
input relation FormalParam(index:number, method:number, mod_var:number)
input relation ComponentType(arrayType:number, componentType:number)
input relation AssignReturnValue(invocation:number, to:number)
input relation ActualParam(index:number, invocation:number, mod_var:number)
input relation Method_Modifier(mod_mod:number, method:number)
input relation Var_Type(mod_var:number, mod_type:number)
input relation HeapAllocation_Type(heap:number, mod_type:number)
//.input HeapAllocation_Type(IO="file", filename="HeapAllocation_Type.csv", delimiter=",") // modified to be an EDB now


// Main schema
// output relation Method_Descriptor(method:number, descriptor:number)
// // .printsize
output relation IsType(t:number)
output relation IsReferenceType(t:number)
output relation IsArrayType(t:number)
output relation IsClassType(t:number)
output relation IsInterfaceType(t:number)
output relation OutApplicationClass(mod_ref:number)
output relation Field_DeclaringType(field:number, declaringClass:number)
output relation Method_DeclaringType(method:number, declaringType:number)
output relation Method_ReturnType(method:number, returnType:number) // redundant
output relation Method_SimpleName(method:number, simpleName:number)
output relation Method_Params(method:number, params:number) // redundant
output relation OutThisVar(method:number, mod_var:number)
output relation OutVar_DeclaringMethod(mod_var:number, method:number)
// output relation HeapAllocation_Type(heap:number, mod_type:number) move into input
// output relation MainMethodArgArray(heap:number) // redundant
// output relation MainMethodArgArrayContent(heap:number) // redundant
output relation Instruction_Method(insn:number, inMethod:number)
output relation IsVirtualMethodInvocation_Insn(insn:number)
output relation IsStaticMethodInvocation_Insn(insn:number)
output relation FieldInstruction_Signature(insn:number, sign:number)
output relation LoadInstanceField_Base(insn:number, mod_var:number)
output relation LoadInstanceField_To(insn:number, mod_var:number)
output relation StoreInstanceField_From(insn:number, mod_var:number)
output relation StoreInstanceField_Base(insn:number, mod_var:number)
output relation LoadStaticField_To(insn:number, mod_var:number)
output relation StoreStaticField_From(insn:number, mod_var:number)
output relation LoadArrayIndex_Base(insn:number, mod_var:number)
output relation LoadArrayIndex_To(insn:number, mod_var:number)
output relation StoreArrayIndex_From(insn:number, mod_var:number)
output relation StoreArrayIndex_Base(insn:number, mod_var:number)
output relation AssignInstruction_To(insn:number, to:number)
output relation AssignCast_From(insn:number, from:number)
output relation AssignCast_Type(insn:number, mod_type:number)
output relation AssignLocal_From(insn:number, from:number)
output relation AssignHeapAllocation_Heap(insn:number, heap:number)
output relation ReturnNonvoid_Var(mod_return:number, mod_var:number)
output relation MethodInvocation_Method(invocation:number, signature:number)
output relation VirtualMethodInvocation_Base(invocation:number, base:number)
output relation VirtualMethodInvocation_SimpleName(invocation:number, simplename:number)
output relation VirtualMethodInvocation_Descriptor(invocation:number, descriptor:number)
output relation SpecialMethodInvocation_Base(invocation:number, base:number)
output relation MethodInvocation_Base(invocation:number, base:number)

// Fat schema
output relation OutLoadInstanceField(base:number, sig:number, to:number, inmethod:number)
output relation OutStoreInstanceField(from:number, base:number, signature:number, inmethod:number)
output relation OutLoadStaticField(sig:number, to:number, inmethod:number)
output relation OutStoreStaticField(from:number, signature:number, inmethod:number)
output relation OutLoadArrayIndex(base:number, to:number, inmethod:number)
output relation OutStoreArrayIndex(from:number, base:number, inmethod:number)
output relation OutAssignCast(mod_type:number, from:number, to:number, inmethod:number)
output relation OutAssignLocal(from:number, to:number, inmethod:number)
output relation OutAssignHeapAllocation(heap:number, to:number, inmethod:number)
output relation ReturnVar(mod_var:number, method:number)
output relation OutStaticMethodInvocation(invocation:number, signature:number, inmethod:number)


// imports
// .in
input relation ClassType(class:number)
input relation ArrayType(arrayType:number)
input relation InterfaceType(interface:number)
input relation Var_DeclaringMethod(mod_var:number, method:number)
input relation ApplicationClass(mod_type:number)
input relation ThisVar(method:number, mod_var:number)
input relation NormalHeap(id:number, mod_type:number)
input relation StringConstant(id:number)
input relation AssignHeapAllocation(instruction:number, index:number, heap:number, to:number, inmethod:number, linenumber: number)
input relation AssignLocal(instruction:number, index:number, from:number, to:number, inmethod:number)
input relation AssignCast(instruction:number, index:number, from:number, to:number, mod_type:number, inmethod:number)
input relation Field(signature:number, declaringClass:number, simplename:number, mod_type:number)
//.input Field(IO="file", filename="Field.csv", delimiter=",")

// .rule
IsType(class) :- ClassType(class).
IsReferenceType(class) :- ClassType(class).
IsClassType(class) :- ClassType(class).

IsType(arrayType) :- ArrayType(arrayType).
IsReferenceType(arrayType) :- ArrayType(arrayType).
IsArrayType(arrayType) :- ArrayType(arrayType).

IsType(interface) :- InterfaceType(interface).
IsReferenceType(interface) :- InterfaceType(interface).
IsInterfaceType(interface) :- InterfaceType(interface).

OutVar_DeclaringMethod(mod_var, method) :- Var_DeclaringMethod(mod_var, method). // redundant OutVar_DeclaringMethod

IsType(mod_type) :- ApplicationClass(mod_type).
IsReferenceType(mod_type) :- ApplicationClass(mod_type).
OutApplicationClass(mod_type) :- ApplicationClass(mod_type).

OutThisVar(method, mod_var) :- ThisVar(method, mod_var).

IsType(mod_type) :- NormalHeap(_, mod_type).
// HeapAllocation_Type(id, mod_type) :- NormalHeap(id, mod_type).
// HeapAllocation_Type(id, 434817) :- StringConstant(id).

Instruction_Method(instruction, method) :-
  AssignHeapAllocation(instruction, index, heap, to, method, linenumber).
AssignInstruction_To(instruction, to) :-
  AssignHeapAllocation(instruction, index, heap, to, method, linenumber).
AssignHeapAllocation_Heap(instruction, heap) :-
  AssignHeapAllocation(instruction, index, heap, to, method, linenumber).

Instruction_Method(instruction, method) :-
  AssignLocal(instruction, index, from, to, method).
AssignLocal_From(instruction, from) :-
  AssignLocal(instruction, index, from, to, method).
AssignInstruction_To(instruction, to) :- 
  AssignLocal(instruction, index, from, to, method).

Instruction_Method(instruction, method) :-
  AssignCast(instruction, index, from, to, mod_type, method).
AssignCast_Type(instruction, mod_type) :-
  AssignCast(instruction, index, from, to, mod_type, method).
AssignCast_From(instruction, from) :-
  AssignCast(instruction, index, from, to, mod_type, method).
AssignInstruction_To(instruction, to) :- 
  AssignCast(instruction, index, from, to, mod_type, method).

Field_DeclaringType(signature, declaringType) :- Field(signature, declaringType, _, _).

MethodInvocation_Base(invocation, base) :- VirtualMethodInvocation_Base(invocation, base).
MethodInvocation_Base(invocation, base) :- SpecialMethodInvocation_Base(invocation, base).




// .in
input relation StaticMethodInvocation(instruction:number, index:number, signature:number, method:number)
input relation SpecialMethodInvocation(instruction:number, index:number, signature:number, base:number, method:number)
input relation VirtualMethodInvocation(instruction:number, index:number, signature:number, base:number, method:number)
input relation Method(method:number, simplename:number, params:number, declaringType:number, returnType:number, jvmDescriptor:number, arity:number)
input relation Method_Descriptor(method:number, descriptor:number)
input relation StoreInstanceField(instruction:number, index:number, from:number, base:number, signature:number, method:number)
input relation LoadInstanceField(instruction:number, index:number, to:number, base:number, signature:number, method:number)
input relation StoreStaticField(instruction:number, index:number, from:number, signature:number, method:number)
input relation LoadStaticField(instruction:number, index:number, to:number, signature:number, method:number)
input relation StoreArrayIndex(instruction:number, index:number, from:number, base:number, method:number)
input relation LoadArrayIndex(instruction:number, index:number, to:number, base:number, method:number)
input relation Return(instruction:number, index:number, mod_var:number, method:number)
//.input Return(IO="file", filename="Return.csv", delimiter=",")

// .rule
Instruction_Method(instruction, method) :-
  StaticMethodInvocation(instruction, index, signature, method).
IsStaticMethodInvocation_Insn(instruction) :-
  StaticMethodInvocation(instruction, index, signature, method).
MethodInvocation_Method(instruction, signature) :- 
  StaticMethodInvocation(instruction, index, signature, method).

Instruction_Method(instruction, method) :-
  SpecialMethodInvocation(instruction, index, signature, base, method).
SpecialMethodInvocation_Base(instruction, base) :-
  SpecialMethodInvocation(instruction, index, signature, base, method).
MethodInvocation_Method(instruction, signature) :-
  SpecialMethodInvocation(instruction, index, signature, base, method).

Instruction_Method(instruction, method) :-
  VirtualMethodInvocation(instruction, index, signature, base, method).
IsVirtualMethodInvocation_Insn(instruction) :-
  VirtualMethodInvocation(instruction, index, signature, base, method).
VirtualMethodInvocation_Base(instruction, base) :-
  VirtualMethodInvocation(instruction, index, signature, base, method).
MethodInvocation_Method(instruction, signature) :-
  VirtualMethodInvocation(instruction, index, signature, base, method).

Method_SimpleName(method, simplename) :-
  Method(method, simplename, params, declaringType, returnType, jvmDescriptor, arity).
Method_DeclaringType(method, declaringType) :-
  Method(method, simplename, params, declaringType, returnType, jvmDescriptor, arity).

// direct import of Method_Descriptor
// Method_Descriptor(method, descriptor) :- 
//   Method_ReturnType(method, returnType),
//   Method_Params(method, params),
//   descriptor == cat(returnType, params).

Instruction_Method(instruction, method) :-
  StoreInstanceField(instruction, index, from, base, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  StoreInstanceField(instruction, index, from, base, signature, method).
StoreInstanceField_Base(instruction, base) :-
  StoreInstanceField(instruction, index, from, base, signature, method).
StoreInstanceField_From(instruction, from) :-
  StoreInstanceField(instruction, index, from, base, signature, method).

Instruction_Method(instruction, method) :-
  LoadInstanceField(instruction, index, to, base, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  LoadInstanceField(instruction, index, to, base, signature, method).
LoadInstanceField_Base(instruction, base) :-
  LoadInstanceField(instruction, index, to, base, signature, method).
LoadInstanceField_To(instruction, to) :-
  LoadInstanceField(instruction, index, to, base, signature, method).

Instruction_Method(instruction, method) :-
  StoreStaticField(instruction, index, from, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  StoreStaticField(instruction, index, from, signature, method).
StoreStaticField_From(instruction, from) :-
  StoreStaticField(instruction, index, from, signature, method).

Instruction_Method(instruction, method) :-
  LoadStaticField(instruction, index, to, signature, method).
FieldInstruction_Signature(instruction, signature) :-
  LoadStaticField(instruction, index, to, signature, method).
LoadStaticField_To(instruction, to) :-
  LoadStaticField(instruction, index, to, signature, method).

Instruction_Method(instruction, method) :-
  StoreArrayIndex(instruction, index, from, base, method).
StoreArrayIndex_Base(instruction, base) :-
  StoreArrayIndex(instruction, index, from, base, method).
StoreArrayIndex_From(instruction, from) :-
  StoreArrayIndex(instruction, index, from, base, method).

Instruction_Method(instruction, method) :-
  LoadArrayIndex(instruction, index, to, base, method).
LoadArrayIndex_Base(instruction, base) :-
  LoadArrayIndex(instruction, index, to, base, method).
LoadArrayIndex_To(instruction, to) :-
  LoadArrayIndex(instruction, index, to, base, method).

Instruction_Method(instruction, method) :-
  Return(instruction, index, mod_var, method).
ReturnNonvoid_Var(instruction, mod_var) :-
  Return(instruction, index, mod_var, method).


// fat schema population
OutLoadInstanceField(base, sig, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  LoadInstanceField_Base(insn, base),
  FieldInstruction_Signature(insn, sig),
  LoadInstanceField_To(insn, to).
OutStoreInstanceField(from, base, sig, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreInstanceField_From(insn, from),
  StoreInstanceField_Base(insn, base),
  FieldInstruction_Signature(insn, sig).
OutLoadStaticField(sig, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  FieldInstruction_Signature(insn, sig),
  LoadStaticField_To(insn, to).
OutStoreStaticField(from, sig, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreStaticField_From(insn, from),
  FieldInstruction_Signature(insn, sig).
OutLoadArrayIndex(base, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  LoadArrayIndex_Base(insn, base),
  LoadArrayIndex_To(insn, to).
OutStoreArrayIndex(from, base, inmethod) :-
  Instruction_Method(insn, inmethod),
  StoreArrayIndex_From(insn, from),
  StoreArrayIndex_Base(insn, base).
OutAssignCast(mod_type, from, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  AssignCast_From(insn, from),
  AssignInstruction_To(insn, to),
  AssignCast_Type(insn, mod_type).
OutAssignLocal(from, to, inmethod) :-
  AssignInstruction_To(insn, to),
  Instruction_Method(insn, inmethod),
  AssignLocal_From(insn, from).
OutAssignHeapAllocation(heap, to, inmethod) :-
  Instruction_Method(insn, inmethod),
  AssignHeapAllocation_Heap(insn, heap),
  AssignInstruction_To(insn, to).
ReturnVar(mod_var, method) :-
  Instruction_Method(insn, method),
  ReturnNonvoid_Var(insn, mod_var).
OutStaticMethodInvocation(invocation, signature, inmethod) :-
  IsStaticMethodInvocation_Insn(invocation),
  Instruction_Method(invocation, inmethod),
  MethodInvocation_Method(invocation, signature).
// HeapAllocation_Type(heap, mod_type),
// MainMethodArgArray(heap) :-
//   heap == 2523804,
//   mod_type == 522475.
// HeapAllocation_Type(heap, mod_type),
// MainMethodArgArrayContent(heap) :-
//   heap == 2523482,
//   mod_type == 434817.
VirtualMethodInvocation_SimpleName(invocation, simplename) :-
  IsVirtualMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_SimpleName(signature, simplename),
  Method_Descriptor(signature, descriptor).
VirtualMethodInvocation_Descriptor(invocation, descriptor) :-
  IsVirtualMethodInvocation_Insn(invocation),
  MethodInvocation_Method(invocation, signature),
  Method_SimpleName(signature, simplename),
  Method_Descriptor(signature, descriptor).

  
// Basic (mod_type-based) analysis
// .comp Basic {
// // .printsize
output relation MethodLookup(simplename:number, descriptor:number, mod_type:number, method:number)
output relation MethodImplemented(simplename:number, descriptor:number, mod_type:number, method:number)
output relation DirectSubclass(a:number, c:number)
output relation Subclass(c:number, a:number)
output relation Superclass(c:number, a:number)
output relation Superinterface(k:number, c:number)
output relation SubtypeOf(subtype:number, mod_type:number)
output relation SupertypeOf(supertype:number, mod_type:number)
output relation SubtypeOfDifferent(subtype:number, mod_type:number)
output relation MainMethodDeclaration(method:number)

// // .printsize MethodLookup
// // .printsize MethodImplemented
// // .printsize DirectSubclass
// // .printsize Subclass
// // .printsize Superclass
// // .printsize Superinterface
// // .printsize SubtypeOf
// // .printsize SupertypeOf
// // .printsize SubtypeOfDifferent
// // .printsize MainMethodDeclaration

// .rule
MethodLookup(simplename, descriptor, mod_type, method) :-
  MethodImplemented(simplename, descriptor, mod_type, method).
MethodLookup(simplename, descriptor, mod_type, method) :-
  DirectSuperclass(mod_type, supertype),
  MethodLookup(simplename, descriptor, supertype, method),
  not MethodImplemented(simplename, descriptor, mod_type, _).
MethodLookup(simplename, descriptor, mod_type, method) :-
  DirectSuperinterface(mod_type, supertype),
  MethodLookup(simplename, descriptor, supertype, method),
  not MethodImplemented(simplename, descriptor, mod_type, _).
MethodImplemented(simplename, descriptor, mod_type, method) :-
  Method_SimpleName(method, simplename),
  Method_Descriptor(method, descriptor),
  Method_DeclaringType(method, mod_type),
  not Method_Modifier(2161502, method).
MainMethodDeclaration(method) :-
  MainClass(mod_type),
  Method_DeclaringType(method, mod_type),
  method != 590319,
  method != 1138805,
  method != 926489,
  Method_SimpleName(method, 2979023),
  Method_Descriptor(method, 3018506),
  Method_Modifier(976234, method),
  Method_Modifier(909718, method).

DirectSubclass(a, c) :-
  DirectSuperclass(a, c).
Subclass(c, a) :-
  DirectSubclass(a, c).
Subclass(c, a) :-
  Subclass(b, a),
  DirectSubclass(b, c).
Superclass(c, a) :-
  Subclass(a, c).
Superinterface(k, c) :-
  DirectSuperinterface(c, k).
Superinterface(k, c) :-
  DirectSuperinterface(c, j),
  Superinterface(k, j).
Superinterface(k, c) :-
  DirectSuperclass(c, mod_super),
  Superinterface(k, mod_super).

SubtypeOf(s, s) :-
  IsClassType(s).
SubtypeOf(t, t) :-
  IsType(t).
SubtypeOf(s, t) :-
  Subclass(t, s).
SubtypeOf(s, s) :-
  IsInterfaceType(s).
SubtypeOf(s, t) :-
  IsClassType(s),
  Superinterface(t, s).
SubtypeOf(s, t) :-
  IsInterfaceType(s),
  IsType(t),
  t == 427039.
SubtypeOf(s, t) :-
  IsArrayType(s),
  IsType(t),
  t == 427039.
SubtypeOf(s, t) :-
  IsInterfaceType(s),
  Superinterface(t, s).
// cross-product warning
// SubtypeOf(s, t) :-
//   ComponentType(s, sc),
//   ComponentType(t, tc),
//   IsReferenceType(sc),
//   IsReferenceType(tc),
//   SubtypeOf(sc, tc).
SubtypeOf(s, t) :-
  SubtypeOf(sc, tc),
  ComponentType(s, sc),
  ComponentType(t, tc),
  IsReferenceType(sc),
  IsReferenceType(tc).
SubtypeOf(s, t) :-
  IsArrayType(s),
  IsInterfaceType(t),
  IsType(t),
  t == 1088934.
SubtypeOf(s, t) :-
  IsArrayType(s),
  IsInterfaceType(t),
  IsType(t),
  t == 716731.

SupertypeOf(s, t) :-
  SubtypeOf(t, s).
SubtypeOfDifferent(s, t) :-
  SubtypeOf(s, t),
  s != t.
// }
// .init basic == Basic





// class initialization
// // .printsize
output relation ClassInitializer(mod_type:number, method:number)
output relation InitializedClass(classOrInterface:number)

// .printsize ClassInitializer
// .printsize InitializedClass

// .rule
ClassInitializer(mod_type, method) :-
   MethodImplemented(894110, 3016219, mod_type, method).
InitializedClass(superclass) :-
   InitializedClass(class),
   DirectSuperclass(class, superclass).
InitializedClass(superinterface) :-
   InitializedClass(classOrInterface),
   DirectSuperinterface(classOrInterface, superinterface).
InitializedClass(class) :-
   MainMethodDeclaration(method),
   Method_DeclaringType(method, class).
InitializedClass(class) :-
   Reachable(inmethod),
   OutAssignHeapAllocation(heap, _, inmethod),
   HeapAllocation_Type(heap, class).
InitializedClass(class) :-
   Reachable(inmethod),
   Instruction_Method(invocation, inmethod),
   IsStaticMethodInvocation_Insn(invocation),
   MethodInvocation_Method(invocation, signature),
   Method_DeclaringType(signature, class).
InitializedClass(classOrInterface) :-
   Reachable(inmethod),
   OutStoreStaticField(_, signature, inmethod),
   Field_DeclaringType(signature, classOrInterface).
InitializedClass(classOrInterface) :-
   Reachable(inmethod),
   OutLoadStaticField(signature, _, inmethod),
   Field_DeclaringType(signature, classOrInterface).
Reachable(clinit) :-
   InitializedClass(class),
   ClassInitializer(class, clinit).


// Main (value-based) analysis
// basic.MethodImplemented, basic.MainMethodDeclaration, basic.SupertypeOf, basic.MethodLookup
// // .printsize
output relation Assign(to:number, from:number)
output relation VarPointsTo(heap:number, mod_var:number)
output relation InstanceFieldPointsTo(heap:number , fld:number, baseheap:number)
output relation StaticFieldPointsTo(heap:number, fld:number)
output relation CallGraphEdge(invocation:number, meth:number)
output relation ArrayIndexPointsTo(baseheap:number, heap:number)
output relation Reachable(method:number)

// .printsize Assign
// .printsize VarPointsTo
// .printsize InstanceFieldPointsTo
// .printsize StaticFieldPointsTo
// .printsize CallGraphEdge
// .printsize ArrayIndexPointsTo
// .printsize Reachable

// .rule
Assign(actual, formal) :-
  CallGraphEdge(invocation, method),
  FormalParam(index, method, formal),
  ActualParam(index, invocation, actual).
Assign(mod_return, local) :-
  CallGraphEdge(invocation, method),
  ReturnVar(mod_return, method),
  AssignReturnValue(invocation, local).
VarPointsTo(heap, mod_var) :-
  OutAssignHeapAllocation(heap, mod_var, inMethod),
  Reachable(inMethod).
VarPointsTo(heap, to) :-
  Assign(from, to),
  VarPointsTo(heap, from).
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  OutAssignLocal(from, to, inmethod),
  VarPointsTo(heap, from).
// .plan 1:(3,2,1)
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  OutAssignCast(mod_type, from, to, inmethod),
  SupertypeOf(mod_type, heaptype),
  HeapAllocation_Type(heap, heaptype),
  VarPointsTo(heap, from).
//  .plan 1:(5,2,1,4,3)
ArrayIndexPointsTo(baseheap, heap) :-
  Reachable(inmethod),
  OutStoreArrayIndex(from, base, inmethod),
  VarPointsTo(baseheap, base),
  VarPointsTo(heap, from),
  HeapAllocation_Type(heap, heaptype),
  HeapAllocation_Type(baseheap, baseheaptype),
  ComponentType(baseheaptype, componenttype),
  SupertypeOf(componenttype, heaptype).
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  OutLoadArrayIndex(base, to, inmethod),
  Var_Type(to, mod_type), // Reordered: change Var_Type to third position, SupertypeOf to 6th position
  VarPointsTo(baseheap, base),
  ArrayIndexPointsTo(baseheap, heap),
  HeapAllocation_Type(baseheap, baseheaptype),
  ComponentType(baseheaptype, basecomponenttype),
  SupertypeOf(mod_type, basecomponenttype).
// .plan 1:(3,2,1,4,5,6,7,8), 2:(4,3,2,1,5,6,7,8)
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  OutLoadInstanceField(base, signature, to, inmethod),
  VarPointsTo(baseheap, base),
  InstanceFieldPointsTo(heap, signature, baseheap).
// .plan 1:(3,2,1,4), 2:(4,2,1,3)
VarPointsTo(heap, to) :-
  Reachable(inmethod),
  OutLoadStaticField(fld, to, inmethod),
  StaticFieldPointsTo(heap, fld).
VarPointsTo(heap, this) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  MethodLookup(simplename, descriptor, heaptype, toMethod),
  OutThisVar(toMethod, this).
// .plan 1:(4,3,2,1,5,6,7,8,9)
InstanceFieldPointsTo(heap, fld, baseheap) :-
  Reachable(inmethod),
  OutStoreInstanceField(from, base, fld, inmethod),
  VarPointsTo(heap, from),
  VarPointsTo(baseheap, base).
// .plan 1:(3,2,1,4), 2:(4,2,1,3)
StaticFieldPointsTo(heap, fld) :-
  Reachable(inmethod),
  OutStoreStaticField(from, fld, inmethod),
  VarPointsTo(heap, from).

// Reachable(toMethod), CallGraphEdge(invocation, toMethod)
Reachable(toMethod) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  MethodLookup(simplename, descriptor, heaptype, toMethod), // Reordered: move MethodLookup to 6th position
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor).
CallGraphEdge(invocation, toMethod) :-
  Reachable(inMethod),
  Instruction_Method(invocation, inMethod),
  VirtualMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  HeapAllocation_Type(heap, heaptype),
  VirtualMethodInvocation_SimpleName(invocation, simplename),
  VirtualMethodInvocation_Descriptor(invocation, descriptor),
  MethodLookup(simplename, descriptor, heaptype, toMethod).
// .plan 1:(4,3,2,1,5,6,7,8)

// Reachable(tomethod), CallGraphEdge(invocation, tomethod)
Reachable(tomethod) :-
  Reachable(inmethod),
  OutStaticMethodInvocation(invocation, tomethod, inmethod).
CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  OutStaticMethodInvocation(invocation, tomethod, inmethod).

// Reachable(tomethod), CallGraphEdge(invocation, tomethod), VarPointsTo(heap, this)
Reachable(tomethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  OutThisVar(tomethod, this).
CallGraphEdge(invocation, tomethod) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  OutThisVar(tomethod, this).
VarPointsTo(heap, this) :-
  Reachable(inmethod),
  Instruction_Method(invocation, inmethod),
  SpecialMethodInvocation_Base(invocation, base),
  VarPointsTo(heap, base),
  MethodInvocation_Method(invocation, tomethod),
  OutThisVar(tomethod, this).
// .plan 1:(4,3,2,1,5,6)

Reachable(method) :-
  MainMethodDeclaration(method).


// souffle -o doop ./doop.dl -j 16
// time ./doop -F./doop-data -D./idbs/ -j 16
// output relation (\w+)(.*)
// RelationSizes("$1", size) :- $1$2,  var size = $2.group_by(()).count_distinct().

output relation RelationSizes(rel: string, size: bit<64>)

RelationSizes("IsType", size) :- IsType(t),  var size = (t).group_by(()).count_distinct().
RelationSizes("IsReferenceType", size) :- IsReferenceType(t),  var size = (t).group_by(()).count_distinct().
RelationSizes("IsArrayType", size) :- IsArrayType(t),  var size = (t).group_by(()).count_distinct().
RelationSizes("IsClassType", size) :- IsClassType(t),  var size = (t).group_by(()).count_distinct().
RelationSizes("IsInterfaceType", size) :- IsInterfaceType(t),  var size = (t).group_by(()).count_distinct().
RelationSizes("OutApplicationClass", size) :- OutApplicationClass(mod_ref),  var size = (mod_ref).group_by(()).count_distinct().
RelationSizes("Field_DeclaringType", size) :- Field_DeclaringType(field, declaringClass),  var size = (field, declaringClass).group_by(()).count_distinct().
RelationSizes("Method_DeclaringType", size) :- Method_DeclaringType(method, declaringType),  var size = (method, declaringType).group_by(()).count_distinct().
RelationSizes("Method_ReturnType", size) :- Method_ReturnType(method, returnType),  var size = (method, returnType).group_by(()).count_distinct().
RelationSizes("Method_SimpleName", size) :- Method_SimpleName(method, simpleName),  var size = (method, simpleName).group_by(()).count_distinct().
RelationSizes("Method_Params", size) :- Method_Params(method, params),  var size = (method, params).group_by(()).count_distinct().
RelationSizes("OutThisVar", size) :- OutThisVar(method, mod_var),  var size = (method, mod_var).group_by(()).count_distinct().
RelationSizes("OutVar_DeclaringMethod", size) :- OutVar_DeclaringMethod(mod_var, method),  var size = (mod_var, method).group_by(()).count_distinct().
RelationSizes("Instruction_Method", size) :- Instruction_Method(insn, inMethod),  var size = (insn, inMethod).group_by(()).count_distinct().
RelationSizes("IsVirtualMethodInvocation_Insn", size) :- IsVirtualMethodInvocation_Insn(insn),  var size = (insn).group_by(()).count_distinct().
RelationSizes("IsStaticMethodInvocation_Insn", size) :- IsStaticMethodInvocation_Insn(insn),  var size = (insn).group_by(()).count_distinct().
RelationSizes("FieldInstruction_Signature", size) :- FieldInstruction_Signature(insn, sign),  var size = (insn, sign).group_by(()).count_distinct().
RelationSizes("LoadInstanceField_Base", size) :- LoadInstanceField_Base(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("LoadInstanceField_To", size) :- LoadInstanceField_To(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("StoreInstanceField_From", size) :- StoreInstanceField_From(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("StoreInstanceField_Base", size) :- StoreInstanceField_Base(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("LoadStaticField_To", size) :- LoadStaticField_To(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("StoreStaticField_From", size) :- StoreStaticField_From(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("LoadArrayIndex_Base", size) :- LoadArrayIndex_Base(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("LoadArrayIndex_To", size) :- LoadArrayIndex_To(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("StoreArrayIndex_From", size) :- StoreArrayIndex_From(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("StoreArrayIndex_Base", size) :- StoreArrayIndex_Base(insn, mod_var),  var size = (insn, mod_var).group_by(()).count_distinct().
RelationSizes("AssignInstruction_To", size) :- AssignInstruction_To(insn, to),  var size = (insn, to).group_by(()).count_distinct().
RelationSizes("AssignCast_From", size) :- AssignCast_From(insn, from),  var size = (insn, from).group_by(()).count_distinct().
RelationSizes("AssignCast_Type", size) :- AssignCast_Type(insn, mod_type),  var size = (insn, mod_type).group_by(()).count_distinct().
RelationSizes("AssignLocal_From", size) :- AssignLocal_From(insn, from),  var size = (insn, from).group_by(()).count_distinct().
RelationSizes("AssignHeapAllocation_Heap", size) :- AssignHeapAllocation_Heap(insn, heap),  var size = (insn, heap).group_by(()).count_distinct().
RelationSizes("ReturnNonvoid_Var", size) :- ReturnNonvoid_Var(mod_return, mod_var),  var size = (mod_return, mod_var).group_by(()).count_distinct().
RelationSizes("MethodInvocation_Method", size) :- MethodInvocation_Method(invocation, signature),  var size = (invocation, signature).group_by(()).count_distinct().
RelationSizes("VirtualMethodInvocation_Base", size) :- VirtualMethodInvocation_Base(invocation, base),  var size = (invocation, base).group_by(()).count_distinct().
RelationSizes("VirtualMethodInvocation_SimpleName", size) :- VirtualMethodInvocation_SimpleName(invocation, simplename),  var size = (invocation, simplename).group_by(()).count_distinct().
RelationSizes("VirtualMethodInvocation_Descriptor", size) :- VirtualMethodInvocation_Descriptor(invocation, descriptor),  var size = (invocation, descriptor).group_by(()).count_distinct().
RelationSizes("SpecialMethodInvocation_Base", size) :- SpecialMethodInvocation_Base(invocation, base),  var size = (invocation, base).group_by(()).count_distinct().
RelationSizes("MethodInvocation_Base", size) :- MethodInvocation_Base(invocation, base),  var size = (invocation, base).group_by(()).count_distinct().
RelationSizes("OutLoadInstanceField", size) :- OutLoadInstanceField(base, sig, to, inmethod),  var size = (base, sig, to, inmethod).group_by(()).count_distinct().
RelationSizes("OutStoreInstanceField", size) :- OutStoreInstanceField(from, base, signature, inmethod),  var size = (from, base, signature, inmethod).group_by(()).count_distinct().
RelationSizes("OutLoadStaticField", size) :- OutLoadStaticField(sig, to, inmethod),  var size = (sig, to, inmethod).group_by(()).count_distinct().
RelationSizes("OutStoreStaticField", size) :- OutStoreStaticField(from, signature, inmethod),  var size = (from, signature, inmethod).group_by(()).count_distinct().
RelationSizes("OutLoadArrayIndex", size) :- OutLoadArrayIndex(base, to, inmethod),  var size = (base, to, inmethod).group_by(()).count_distinct().
RelationSizes("OutStoreArrayIndex", size) :- OutStoreArrayIndex(from, base, inmethod),  var size = (from, base, inmethod).group_by(()).count_distinct().
RelationSizes("OutAssignCast", size) :- OutAssignCast(mod_type, from, to, inmethod),  var size = (mod_type, from, to, inmethod).group_by(()).count_distinct().
RelationSizes("OutAssignLocal", size) :- OutAssignLocal(from, to, inmethod),  var size = (from, to, inmethod).group_by(()).count_distinct().
RelationSizes("OutAssignHeapAllocation", size) :- OutAssignHeapAllocation(heap, to, inmethod),  var size = (heap, to, inmethod).group_by(()).count_distinct().
RelationSizes("ReturnVar", size) :- ReturnVar(mod_var, method),  var size = (mod_var, method).group_by(()).count_distinct().
RelationSizes("OutStaticMethodInvocation", size) :- OutStaticMethodInvocation(invocation, signature, inmethod),  var size = (invocation, signature, inmethod).group_by(()).count_distinct().
RelationSizes("MethodLookup", size) :- MethodLookup(simplename, descriptor, mod_type, method),  var size = (simplename, descriptor, mod_type, method).group_by(()).count_distinct().
RelationSizes("MethodImplemented", size) :- MethodImplemented(simplename, descriptor, mod_type, method),  var size = (simplename, descriptor, mod_type, method).group_by(()).count_distinct().
RelationSizes("DirectSubclass", size) :- DirectSubclass(a, c),  var size = (a, c).group_by(()).count_distinct().
RelationSizes("Subclass", size) :- Subclass(c, a),  var size = (c, a).group_by(()).count_distinct().
RelationSizes("Superclass", size) :- Superclass(c, a),  var size = (c, a).group_by(()).count_distinct().
RelationSizes("Superinterface", size) :- Superinterface(k, c),  var size = (k, c).group_by(()).count_distinct().
RelationSizes("SubtypeOf", size) :- SubtypeOf(subtype, mod_type),  var size = (subtype, mod_type).group_by(()).count_distinct().
RelationSizes("SupertypeOf", size) :- SupertypeOf(supertype, mod_type),  var size = (supertype, mod_type).group_by(()).count_distinct().
RelationSizes("SubtypeOfDifferent", size) :- SubtypeOfDifferent(subtype, mod_type),  var size = (subtype, mod_type).group_by(()).count_distinct().
RelationSizes("MainMethodDeclaration", size) :- MainMethodDeclaration(method),  var size = (method).group_by(()).count_distinct().
RelationSizes("ClassInitializer", size) :- ClassInitializer(mod_type, method),  var size = (mod_type, method).group_by(()).count_distinct().
RelationSizes("InitializedClass", size) :- InitializedClass(classOrInterface),  var size = (classOrInterface).group_by(()).count_distinct().
RelationSizes("Assign", size) :- Assign(to, from),  var size = (to, from).group_by(()).count_distinct().
RelationSizes("VarPointsTo", size) :- VarPointsTo(heap, mod_var),  var size = (heap, mod_var).group_by(()).count_distinct().
RelationSizes("InstanceFieldPointsTo", size) :- InstanceFieldPointsTo(heap , fld, baseheap),  var size = (heap , fld, baseheap).group_by(()).count_distinct().
RelationSizes("StaticFieldPointsTo", size) :- StaticFieldPointsTo(heap, fld),  var size = (heap, fld).group_by(()).count_distinct().
RelationSizes("CallGraphEdge", size) :- CallGraphEdge(invocation, meth),  var size = (invocation, meth).group_by(()).count_distinct().
RelationSizes("ArrayIndexPointsTo", size) :- ArrayIndexPointsTo(baseheap, heap),  var size = (baseheap, heap).group_by(()).count_distinct().
RelationSizes("Reachable", size) :- Reachable(method),  var size = (method).group_by(()).count_distinct().